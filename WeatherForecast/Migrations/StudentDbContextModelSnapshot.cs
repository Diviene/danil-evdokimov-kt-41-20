// <auto-generated />
using System;
using Lab3.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WeatherForecast.Migrations
{
    [DbContext(typeof(StudentDbContext))]
    partial class StudentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecast.Group", b =>
                {
                    b.Property<int?>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("group_id")
                        .HasComment("Идентификатор группы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("GroupId"));

                    b.Property<bool>("DoesExist")
                        .HasColumnType("bool")
                        .HasColumnName("c_group_doesexist")
                        .HasComment("Существует ли группа");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_group_groupname")
                        .HasComment("Наименование группы");

                    b.Property<int?>("GroupYear")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("int4")
                        .HasColumnName("c_group_groupyear")
                        .HasComment("Год формирования группы");

                    b.Property<int>("SpecialnostId")
                        .HasColumnType("int4")
                        .HasColumnName("c_group_specialnostid")
                        .HasComment("ИД специальности");

                    b.HasKey("GroupId")
                        .HasName("pk_(TableName)_GroupId");

                    b.HasIndex(new[] { "SpecialnostId" }, "idx_Group_fk_f_specialnost_id");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("WeatherForecast.Models.Specialnost", b =>
                {
                    b.Property<int>("SpecialnostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("specialnost_id")
                        .HasComment("Идентификатор специальности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecialnostId"));

                    b.Property<string>("SpecialnostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_group_specialnostname")
                        .HasComment("Наименование специальности");

                    b.HasKey("SpecialnostId")
                        .HasName("pk_(TableName)_SpecialnostId");

                    b.ToTable("Specialnosts");
                });

            modelBuilder.Entity("WeatherForecast.Group", b =>
                {
                    b.HasOne("WeatherForecast.Models.Specialnost", "Specialnosts")
                        .WithMany("Groups")
                        .HasForeignKey("SpecialnostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_f_specialnost_id");

                    b.Navigation("Specialnosts");
                });

            modelBuilder.Entity("WeatherForecast.Models.Specialnost", b =>
                {
                    b.Navigation("Groups");
                });
#pragma warning restore 612, 618
        }
    }
}
